'''
980. 不同路径 III
在二维网格 grid 上，有 4 种类型的方格：

1 表示起始方格。且只有一个起始方格。
2 表示结束方格，且只有一个结束方格。
0 表示我们可以走过的空方格。
-1 表示我们无法跨越的障碍。
返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。

每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。



示例 1：

输入：[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
输出：2
解释：我们有以下两条路径：
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
示例 2：

输入：[[1,0,0,0],[0,0,0,0],[0,0,0,2]]
输出：4
解释：我们有以下四条路径：
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
示例 3：

输入：[[0,1],[2,0]]
输出：0
解释：
没有一条路能完全穿过每一个空的方格一次。
请注意，起始和结束方格可以位于网格中的任意位置。


提示：

1 <= grid.length * grid[0].length <= 20
'''
class Solution:
    def uniquePathsIII(self, grid) -> int:
        '''
        关键在于标记一个走过的方格，依据走过的方格个数一直减到0代表一种路径
        '''
        self.res = 0
        m,n = len(grid),len(grid[0])
        step = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    s_x,s_y = i,j  #开始位置坐标
                if grid[i][j] == 2:
                    e_x,e_y = i,j  #结束位置坐标
                if grid[i][j] != -1:   #记录需要走的步数，也就是必须要走过的无障碍的格子数
                    step += 1
        def backtrack(x,y,step): #回溯函数
            step -= 1  #每进入一次就相当于走了一个没有障碍的空格
            if x==e_x and y==e_y:  #当访问到结尾位置坐标时，一次搜索就结束了return
                if step == 0: #如果正好走完了，证明是一种解法，结果加一
                    self.res += 1
                return
            grid[x][y] = -1  #标记当前坐标为访问过的
            for (tx,ty)in ((x+1,y),(x-1,y),(x,y-1),(x,y+1)):  #尝试四个方向的点
                if 0<=tx<m and 0<=ty<n and grid[tx][ty]!=-1:  #若这些点没有访问，且没有越界
                    backtrack(tx,ty,step)  #递归
            grid[x][y] = 0  #回溯
        backtrack(s_x,s_y,step)
        return self.res