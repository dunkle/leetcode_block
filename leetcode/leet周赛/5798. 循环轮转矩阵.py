class Solution:
    def rotateGrid(self, grid, k: int):
        m = len(grid)
        n = len(grid[0])
        if m==0:
            return grid

        def reverse(k, grid):
            k = k-1
            lu = (k,k)
            ru = (k, n-k-1)
            ld = (m-k-1, k)
            rd = (m-k-1, n-k-1)

            # 上边 从右到左 旋转
            tmp = grid[k][k]
            # grid[k][k:n-k-1] = grid[k][k+1:n-k]
            for i in range(k, n-k-1):
                grid[k][i] = grid[k][i+1]

            # 右边 从下到上旋转
            # grid[k:m-k-1][n-k-1] = grid[k+1:m-k][n-k-1]
            for i in range(k, m-k-1):
                grid[i][n-k-1] = grid[i+1][n-k-1]

            # 下边 从右边到左 旋转
            # grid[m-k-1][k+1:n-k] = grid[m-k-1][k:n-k-1]
            for i in range(n-k-1, k, -1):
                grid[m-k-1][i] = grid[m-k-1][i-1]

            # 左边 从上到下旋转
            # grid[k+1:m-k][k] = grid[k:m-k-1][k]

            for i in range(m-k-1, k+1, -1):
                grid[i][k] = grid[i-1][k]

            grid[k+1][k] = tmp
            # print(tmp)
        allrow = m//2
        allcol = n//2
        cengshu = min(allrow, allcol)
        # print(allrow)
        # 由于k的次数可能特别大，因此需要取余， 最外围的个数大小为m*2+n*2-4
        k = k%(m*2+n*2-4)
        print(k)
        for j in range(k):
            # 一共需要旋转k次
            for i in range(1, cengshu+1):
                # 每一层旋转一次
                reverse(i, grid)
        return grid
a = Solution()
grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
# print(grid[0][:])
# print(grid)
k = 12
# grid = [[10,1,4,8],[6,6,3,10],[7,4,7,10],[1,10,6,1],[2,1,1,10],[3,8,9,2],[7,1,10,10],[7,1,4,9],[2,2,4,2],[10,7,5,10]]
# k = 1
grid =  [[4035,3336,1046,989,3205,3972,1317,1142,1326,943,955,1781,4538,3425,2235,3443,2608,2951,57,1343,2736,2190,43,3543],[1956,1751,3674,2465,926,4700,2195,2830,1944,866,3119,3293,296,309,4404,3175,3807,1534,3725,2417,3360,1749,3092,1196],[433,349,1903,3791,4589,2349,3206,2997,2659,3121,762,309,4475,3139,3126,3678,1947,4207,2151,4008,2811,3337,165,875],[4345,2910,374,3943,871,4430,3789,2488,3156,1313,3758,993,2642,2356,1373,2548,571,1538,4115,529,779,2367,34,4722],[447,787,4995,2715,3246,4331,3907,4112,2215,1907,37,4115,1948,4046,1931,3838,66,915,1977,3346,2520,2050,911,4841],[3372,2797,1414,876,4088,421,4012,3228,957,3938,2634,1873,3260,3540,4503,306,1123,4647,4069,3439,3865,425,3827,4224],[232,2483,1494,3633,4571,470,4930,3686,2633,790,3756,1898,2264,4792,3918,3206,2649,3305,1250,2024,3764,2462,333,475],[3784,742,3899,3811,2183,619,2298,3169,1094,2621,750,4183,2306,3104,1810,1198,3107,1447,1237,4515,3961,1103,2026,42],[1203,3138,2146,1551,3331,4919,4562,4080,3239,3177,1349,1397,2649,4388,1106,1731,4468,2239,4535,4191,4801,2368,4002,4349],[1586,118,1787,4617,1852,2361,4116,3670,1519,2703,4280,1451,2328,2162,2894,3747,2207,1660,2975,3344,563,4659,115,4166],[4557,3599,282,316,327,4802,3255,668,645,1728,790,430,3985,4145,4023,4229,738,3527,1210,658,3291,402,4389,814],[1237,1428,623,3343,3851,1811,3011,4776,1063,508,775,2113,3261,8,4534,403,1257,3967,1190,124,2387,596,3548,3318],[2759,968,2228,3388,2764,4475,2893,2248,3610,2526,4367,376,4511,2701,691,536,126,4178,3509,4475,1383,3985,1566,4764],[2402,2753,1630,1468,2529,4841,2151,736,1269,4376,2722,320,850,1447,591,3157,447,2454,582,4391,150,4213,1022,2731]]
a.rotateGrid(grid, k)
for i in range(len(grid)):
    print(grid[i])

daan = [[4035,3336,1046,989,3205,3972,1317,1142,1326,943,955,1781,4538,3425,2235,3443,2608,2951,57,1343,2736,2190,43,3543],[1956,911,3827,333,2026,4002,115,4389,3548,1566,3985,1383,4475,3509,4178,126,536,691,2701,4511,376,4367,2526,1196],[433,34,3967,1257,403,4534,8,3261,2113,775,508,1063,4776,3011,1811,3851,3343,623,282,1787,2146,3899,3610,875],[4345,165,1190,3291,658,1210,3527,738,4229,4023,4145,3985,430,790,1728,645,668,3255,4802,327,316,1494,2248,4722],[447,3092,124,563,3246,4331,3907,4112,2215,1907,37,4115,1948,4046,1931,3838,66,915,1977,3346,4617,1414,2893,4841],[3372,1749,2387,4801,4088,1349,3177,3239,4080,4562,4919,619,470,421,4012,3228,957,3938,2634,3439,1551,4995,4475,4224],[232,3360,596,3961,4571,1397,4930,3686,2633,790,3756,1898,2264,4792,3918,3206,2649,3305,1873,2024,3811,374,2764,475],[3784,2417,402,3764,2183,2649,2298,3169,1094,2621,750,4183,2306,3104,1810,1198,3107,1447,3260,4515,3633,1903,3388,42],[1203,3725,4659,3865,3331,4388,1106,1731,4468,2239,4535,1237,1250,4069,4647,1123,306,4503,3540,4191,876,3791,2228,4349],[1586,1534,2368,2520,1852,2361,4116,3670,1519,2703,4280,1451,2328,2162,2894,3747,2207,1660,2975,3344,2715,4589,968,4166],[4557,3807,1103,779,529,4115,1538,571,2548,1373,2356,2642,993,3758,1313,3156,2488,3789,4430,871,3943,2349,1428,814],[1237,3175,2462,425,2050,2367,3337,2811,4008,2151,4207,1947,3678,3126,3139,4475,309,762,3121,2659,2997,3206,3599,3318],[2759,4404,309,296,3293,3119,866,1944,2830,2195,4700,926,2465,3674,1751,349,2910,787,2797,2483,742,3138,118,4764],[2402,2753,1630,1468,2529,4841,2151,736,1269,4376,2722,320,850,1447,591,3157,447,2454,582,4391,150,4213,1022,2731]]